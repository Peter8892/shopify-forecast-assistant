import express from "express";
import cors from "cors";
import fetch from "node-fetch";

const app = express();
app.use(cors());
app.use(express.json());

// âœ… Config
const PORT = process.env.PORT || 3000;
const SHOPIFY_STORE = process.env.SHOPIFY_STORE; // e.g. myshop.myshopify.com
const SHOPIFY_TOKEN = process.env.SHOPIFY_TOKEN;
const OPENAI_API_KEY = process.env.OPENAI_API_KEY;
const N8N_WEBHOOK_URL = process.env.N8N_WEBHOOK_URL;

// ğŸ§  Get Past Orders from Shopify
async function getShopifyOrders(customerEmail) {
  const response = await fetch(
    `https://${SHOPIFY_STORE}/admin/api/2024-10/orders.json?status=any&email=${customerEmail}`,
    {
      headers: {
        "X-Shopify-Access-Token": SHOPIFY_TOKEN,
        "Content-Type": "application/json",
      },
    }
  );
  const data = await response.json();
  return data.orders || [];
}

// ğŸ¤– Predict Next Order Using OpenAI
async function predictNextOrder(orderHistory) {
  const items = orderHistory
    .flatMap(order =>
      order.line_items.map(item => ({
        name: item.name,
        quantity: item.quantity,
        date: order.created_at,
      }))
    )
    .slice(0, 10); // recent 10 orders

  const prompt = `
  You are a smart eCommerce assistant. Based on this customer's order history, predict what they might need to restock this month.
  Order history:
  ${JSON.stringify(items, null, 2)}
  Return JSON with "predicted_items": [{"name": "", "quantity": ""}]
  `;

  const res = await fetch("https://api.openai.com/v1/chat/completions", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${OPENAI_API_KEY}`,
    },
    body: JSON.stringify({
      model: "gpt-4o-mini",
      messages: [{ role: "user", content: prompt }],
      temperature: 0.7,
    }),
  });

  const result = await res.json();
  const message = result.choices[0].message.content;
  return JSON.parse(message);
}

// ğŸ§¾ API Endpoint for Forecast Assistant
app.post("/forecast", async (req, res) => {
  try {
    const { email } = req.body;
    if (!email) return res.status(400).json({ error: "Email required" });

    // Step 1: Fetch order history
    const orders = await getShopifyOrders(email);
    if (orders.length === 0)
      return res.json({ message: "No orders found for this customer" });

    // Step 2: Predict next order
    const prediction = await predictNextOrder(orders);

    // Step 3: Send analytics to n8n
    await fetch(N8N_WEBHOOK_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ email, prediction }),
    });

    // Step 4: Send back to frontend
    res.json({ success: true, forecast: prediction });
  } catch (error) {
    console.error("Error:", error);
    res.status(500).json({ error: "Something went wrong" });
  }
});

app.listen(PORT, () => console.log(`ğŸš€ Forecast Assistant running on ${PORT}`));
